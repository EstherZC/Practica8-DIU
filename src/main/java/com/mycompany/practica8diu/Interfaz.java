/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.practica8diu;

import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author Esther
 */
public class Interfaz extends javax.swing.JFrame {


    JFileChooser fc = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Imágenes (*.jpg, *.png)", "jpg", "png");
    private File file;
    private Mat imagenOriginal, imagenAlterada;
    private BufferedImage img;
    
    public Interfaz() {
        initComponents();
        fc.addChoosableFileFilter(filter);
        nu.pattern.OpenCV.loadShared();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escritorio = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        itemAbrir = new javax.swing.JMenuItem();
        itemUmbralizar = new javax.swing.JMenuItem();
        itemCerrarOriginal = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        itemCerrar = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        itemHelpDescription = new javax.swing.JMenuItem();
        itemHelpAbrir = new javax.swing.JMenuItem();
        itemHelpGuardar = new javax.swing.JMenuItem();
        itemHelpUmbralizar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 739, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );

        jMenuFile.setText("Archivo");

        itemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        itemAbrir.setText("Abrir");
        itemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAbrirActionPerformed(evt);
            }
        });
        jMenuFile.add(itemAbrir);

        itemUmbralizar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        itemUmbralizar.setText("Umbralizar");
        itemUmbralizar.setEnabled(false);
        itemUmbralizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemUmbralizarActionPerformed(evt);
            }
        });
        jMenuFile.add(itemUmbralizar);

        itemCerrarOriginal.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        itemCerrarOriginal.setText("Cerrar imagen original");
        itemCerrarOriginal.setEnabled(false);
        itemCerrarOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCerrarOriginalActionPerformed(evt);
            }
        });
        jMenuFile.add(itemCerrarOriginal);
        jMenuFile.add(jSeparator1);

        itemCerrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        itemCerrar.setText("Cerrar aplicación");
        itemCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCerrarActionPerformed(evt);
            }
        });
        jMenuFile.add(itemCerrar);

        jMenuBar1.add(jMenuFile);

        jMenuHelp.setText("Ayuda");

        jMenu3.setText("Acerca de");

        itemHelpDescription.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        itemHelpDescription.setText("Descripción");
        itemHelpDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemHelpDescriptionActionPerformed(evt);
            }
        });
        jMenu3.add(itemHelpDescription);

        itemHelpAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        itemHelpAbrir.setText("Abrir");
        itemHelpAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemHelpAbrirActionPerformed(evt);
            }
        });
        jMenu3.add(itemHelpAbrir);

        itemHelpGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        itemHelpGuardar.setText("Guardar");
        itemHelpGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemHelpGuardarActionPerformed(evt);
            }
        });
        jMenu3.add(itemHelpGuardar);

        itemHelpUmbralizar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        itemHelpUmbralizar.setText("Umbralizar");
        itemHelpUmbralizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemHelpUmbralizarActionPerformed(evt);
            }
        });
        jMenu3.add(itemHelpUmbralizar);

        jMenuHelp.add(jMenu3);

        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorio)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorio)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCerrarActionPerformed
        int answer = JOptionPane.showConfirmDialog(this, "¿Quiere cerrar la aplcación?", "Salir", JOptionPane.YES_NO_OPTION);
        if(answer == JOptionPane.YES_OPTION){
            dispose();
        }
    }//GEN-LAST:event_itemCerrarActionPerformed

    private void itemHelpDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemHelpDescriptionActionPerformed
        JOptionPane.showMessageDialog(escritorio, "Esta aplicación sirve para realizar un umbralizado a partir de una imagen guardada en el ordenador del usuario.", "Ayuda: Descripción de la Aplicación", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_itemHelpDescriptionActionPerformed

    private void itemHelpAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemHelpAbrirActionPerformed
        JOptionPane.showMessageDialog(escritorio, "El usuario puede seleccionar una imagen en su equipo con el formato (.jpg o .png) para mostrar la imagen en la aplicación con tamaño máximo de 1024x768.", "Ayuda: Abrir", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_itemHelpAbrirActionPerformed

    private void itemHelpGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemHelpGuardarActionPerformed
        JOptionPane.showMessageDialog(escritorio, "El usuario puede guardar en su equipo la imagen umbralizada que se encuentra actualmente en la pantalla con formato .jgp o .png.", "Ayuda: Guardar", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_itemHelpGuardarActionPerformed

    private void itemHelpUmbralizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemHelpUmbralizarActionPerformed
        JOptionPane.showMessageDialog(escritorio, "El usuario puede decidir el umbral del filtro que se le aplicará a la imagen introduciendo el valor en la ventana emergente.", "Ayuda: Umbralizar", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_itemHelpUmbralizarActionPerformed

    private void itemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAbrirActionPerformed
        int option = fc.showOpenDialog(this);
        file = fc.getSelectedFile();
        if(option == JFileChooser.APPROVE_OPTION){
            if(comprobarExtension(file)){
                imagenOriginal = Imgcodecs.imread(file.getPath());
                img = (BufferedImage) HighGui.toBufferedImage(imagenOriginal);
                if(img.getHeight() <= 768 && img.getWidth() <= 1024){
                    if(escritorio.getAllFrames().length > 0) cerrarVentanas();
                    VentanaInterna ventana = new VentanaInterna(file.getName(), imagenOriginal);
                    escritorio.add(ventana);
                    ventana.setVisible(true);
                    itemUmbralizar.setEnabled(true);
                    itemCerrarOriginal.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(this, "El tamaño de las imágenes debe ser como máximo 1024x768", "Tamaño imagen requerido", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Sólo se pueden abrir archivos con extensión .jpg o .png.");
            }
        }
    }//GEN-LAST:event_itemAbrirActionPerformed

    private void itemUmbralizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemUmbralizarActionPerformed
        try{
            Integer umbral = Integer.parseInt(JOptionPane.showInputDialog(this, "¿Cuál es el valor del umbralizado de la imagen?", "Valor de umbralizado", JOptionPane.QUESTION_MESSAGE));
            imagenAlterada = umbralizar(imagenOriginal, umbral);
            
            String nombre = "Umbral: "+umbral;
            VentanaInterna ventana = new VentanaInterna(nombre, imagenAlterada);
            ventana.menuUmbralVisible();
            escritorio.add(ventana);
            ventana.setVisible(true);
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Sólo se pueden números enteros");
        }
    }//GEN-LAST:event_itemUmbralizarActionPerformed

    private void itemCerrarOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCerrarOriginalActionPerformed
        cerrarVentanas();
        itemUmbralizar.setEnabled(false);
        itemCerrarOriginal.setEnabled(false);
    }//GEN-LAST:event_itemCerrarOriginalActionPerformed

    private void cerrarVentanas() {
        JInternalFrame[] allFrames = escritorio.getAllFrames();
        for (JInternalFrame frame : allFrames) {
            frame.dispose();
        }
    }
    
    private boolean comprobarExtension(File file){
        return file.getName().endsWith(".jpg") || file.getName().endsWith(".png");
    }
    private Mat umbralizar(Mat imagen_original, Integer umbral) {
        // crear dos imágenes en niveles de gris con el mismo tamaño que la original
        Mat imagenGris = new Mat(imagen_original.rows(), imagen_original.cols(), CvType.CV_8U);
        Mat imagenUmbralizada = new Mat(imagen_original.rows(), imagen_original.cols(), CvType.CV_8U);
        // convierte a niveles de grises la imagen original
        Imgproc.cvtColor(imagen_original, imagenGris, Imgproc.COLOR_BGR2GRAY);
        // umbraliza la imagen:
        // - píxeles con nivel de gris > umbral se ponen a 1
        // - píxeles con nivel de gris <= umbra se ponen a 0
        Imgproc.threshold(imagenGris, imagenUmbralizada, umbral, 255, Imgproc.THRESH_BINARY);
        return imagenUmbralizada;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JMenuItem itemAbrir;
    private javax.swing.JMenuItem itemCerrar;
    private javax.swing.JMenuItem itemCerrarOriginal;
    private javax.swing.JMenuItem itemHelpAbrir;
    private javax.swing.JMenuItem itemHelpDescription;
    private javax.swing.JMenuItem itemHelpGuardar;
    private javax.swing.JMenuItem itemHelpUmbralizar;
    private javax.swing.JMenuItem itemUmbralizar;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables

    
}
